// =============================
// Module Ench√®re ‚Äì Imports
// =============================
const jwt = require("jsonwebtoken");               // Pour d√©coder les tokens
const { PrismaClient } = require("@prisma/client");// ORM pour la base de donn√©es
const prisma = new PrismaClient();                 // Cr√©ation de l'instance Prisma

// =============================
// Constantes de configuration
// =============================
const SECRET_KEY = "mdp";                          // Cl√© secr√®te JWT 
const DUREE_ENCHERE_MS = 60 * 60 * 1000; // Dur√©e d'une ench√®re en millisecondes (1 heure)

// =============================
// Fonction pour cr√©er une ench√®re
// =============================
// =============================
// Fonction pour cr√©er une ench√®re
// =============================
async function CreateAuction(req, res) {
  const { cardId, startBid } = req.body;
  const token = req.headers.authorization?.split(" ")[1];

  if (!token || !cardId || typeof startBid !== "number" || startBid < 1) {
    return res.status(400).json({
      message: "Token, carte ou prix de d√©part invalide",
    });
  }

  try {
    const decoded = jwt.verify(token, SECRET_KEY);
    const user = await prisma.user.findUnique({ where: { id: decoded.id } });

    if (!user) {
      return res.status(404).json({ message: "Utilisateur non trouv√©" });
    }

    // Parsing collection
    let collection = [];
    try {
      collection = Array.isArray(user.collection)
        ? user.collection
        : JSON.parse(user.collection);
    } catch {
      return res.status(500).json({
        message: "Erreur de lecture de la collection utilisateur",
      });
    }

    // V√©rification pr√©sence de la carte
    const index = collection.findIndex((c) => c.id === cardId);
    if (index === -1) {
      return res
        .status(400)
        .json({ message: "Carte non pr√©sente dans la collection" });
    }

    if (collection[index].count < 2) {
      return res.status(400).json({
        message:
          "‚ùå Vous devez poss√©der au moins 2 exemplaires pour vendre un doublon",
      });
    }

    // Retirer 1 exemplaire
    collection[index].count -= 1;
    if (collection[index].count === 0) {
      collection.splice(index, 1);
    }
    const endDate = new Date(Date.now() + DUREE_ENCHERE_MS);
    // üí° Cr√©er une ench√®re avec une date "d'ouverture" qu'on appelle end_date
    const enchere = await prisma.auction.create({
      data: {
        card_id: cardId,
        seller_id: user.id,
        bid: startBid,
        end_date: endDate, // üïí Stockage utile (sera remplac√©e √† la cl√¥ture manuelle si besoin)
      },
    });

    // Mettre √† jour la collection
    await prisma.user.update({
      where: { id: user.id },
      data: { collection },
    });

    res.status(200).json({
      message: "Ench√®re cr√©√©e avec succ√®s",
      enchere,
    });
  } catch (err) {
    console.error("‚ùå Erreur dans CreateAuction :", err);
    res.status(401).json({
      message: "√âchec de l'authentification ou de la cr√©ation d'ench√®re",
    });
  }
}

// =============================
// Fonction pour placer une ench√®re
// =============================
async function PlaceBid(req, res) {
    const { enchereId, montant } = req.body;
    const token = req.headers.authorization?.split(" ")[1];

    if (!token || !enchereId || !montant) {
        return res.status(400).json({ message: "Token, ench√®re ou montant manquant" });
    }

    try {
        const decoded = jwt.verify(token, SECRET_KEY);
        const bidder = await prisma.user.findUnique({ where: { id: decoded.id } });

        if (!bidder) return res.status(404).json({ message: "Acheteur non trouv√©" });

        const enchere = await prisma.auction.findUnique({
            where: { id: enchereId },
            include: { seller: true },
        });

        if (!enchere) return res.status(404).json({ message: "Ench√®re introuvable" });

        if (enchere.seller_id === bidder.id) {
            return res.status(400).json({ message: "Vous ne pouvez pas ench√©rir sur votre propre ench√®re" });
        }

        if (enchere.end_date < new Date()) {
            return res.status(400).json({ message: "‚è∞ L'ench√®re est d√©j√† termin√©e" });
        }

        if (montant <= enchere.bid) {
            return res.status(400).json({ message: "Le montant doit √™tre sup√©rieur √† l'ench√®re actuelle" });
        }

        if (bidder.currency < montant) {
            return res.status(400).json({ message: "‚ùå Monnaie insuffisante" });
        }

        // ‚úÖ Rembourser l'ancien ench√©risseur si existant
        if (enchere.bidder_id) {
            await prisma.user.update({
                where: { id: enchere.bidder_id },
                data: {
                    currency: {
                        increment: enchere.bid,
                    },
                },
            });
        }

        // D√©duire le montant du nouvel ench√©risseur
        await prisma.user.update({
            where: { id: bidder.id },
            data: {
                currency: {
                    decrement: montant,
                },
            },
        });

        // üîÅ Mise √† jour de l‚Äôench√®re
        const updatedAuction = await prisma.auction.update({
            where: { id: enchereId },
            data: {
                bid: montant,
                bidder_id: bidder.id,
            },
        });

        return res.status(200).json({
            message: "‚úÖ Ench√®re mise √† jour",
            enchere: updatedAuction,
        });
    } catch (err) {
        console.error(" Erreur dans PlaceBid:", err.message);
        return res.status(401).json({ message: "Token invalide ou erreur" });
    }
}

// =============================
// Fonction pour r√©cup√©rer toutes les ench√®res
// =============================
async function GetAllEncheres(req, res) {
    const token = req.headers.authorization?.split(" ")[1];

    if (!token) return res.status(401).json({ message: "Token manquant" });

    try {
        const decoded = jwt.verify(token, SECRET_KEY);
        const userId = decoded.id;

        // On r√©cup√®re toutes les ench√®res avec relations carte, vendeur, ench√©risseur
        const encheres = await prisma.auction.findMany({
            include: {
                card: true,
                seller: { select: { id: true, username: true } },
                bidder: { select: { id: true, username: true } },
            },
            orderBy: {
                end_date: 'asc',
            }
        });

        res.status(200).json({ message: "Liste des ench√®res", encheres });

    } catch (err) {
        console.error("‚ùå Erreur GetAllEncheres:", err.message);
        res.status(401).json({ message: "Token invalide" });
    }
}
// =============================


// =============================
// Fonction pour cl√¥turer une ench√®re
// =============================
async function CloturerEnchere(req, res) {
  const { auctionId } = req.body;
  const token = req.headers.authorization?.split(" ")[1];

  if (!token || !auctionId) {
    return res.status(400).json({ message: "Token ou ID ench√®re manquant" });
  }

  try {
    const decoded = jwt.verify(token, SECRET_KEY);
    const userId = decoded.id;

    const enchere = await prisma.auction.findUnique({
      where: { id: auctionId },
      include: {
        seller: true,
        bidder: true,
        card: true,
      },
    });

    if (!enchere) return res.status(404).json({ message: "Ench√®re introuvable" });

    const isVendeur = enchere.seller_id === userId;
    const isAcheteur = enchere.bidder_id === userId;

    if (!isVendeur && !isAcheteur) {
      return res.status(403).json({ message: "‚õî Vous n'avez pas le droit de cl√¥turer cette ench√®re" });
    }

    // Cas : pas d'ench√©risseur ‚Üí retourner la carte au vendeur
    if (!enchere.bidder_id) {
      let updatedCollection = [];
      try {
        updatedCollection = Array.isArray(enchere.seller.collection)
          ? [...enchere.seller.collection]
          : JSON.parse(enchere.seller.collection);
      } catch {
        return res.status(500).json({ message: "‚ùå Erreur collection vendeur" });
      }

      const index = updatedCollection.findIndex(c => c.id === enchere.card_id);
      if (index >= 0) {
        updatedCollection[index].count += 1;
      } else {
        updatedCollection.push({ id: enchere.card_id, count: 1 });
      }

      await prisma.user.update({
        where: { id: enchere.seller_id },
        data: { collection: updatedCollection },
      });

      await prisma.auction.delete({ where: { id: auctionId } });

      return res.status(200).json({ message: "üõë Aucune ench√®re, carte retourn√©e au vendeur" });
    }

    // ‚úÖ Cas : un gagnant ‚Üí transfert carte & monnaie
    const bidderCollectionRaw = enchere.bidder.collection;
    let bidderCollection = [];

    try {
      bidderCollection = Array.isArray(bidderCollectionRaw)
        ? [...bidderCollectionRaw]
        : JSON.parse(bidderCollectionRaw);
    } catch {
      return res.status(500).json({ message: "‚ùå Erreur collection acheteur" });
    }

    const idx = bidderCollection.findIndex(c => c.id === enchere.card_id);
    if (idx >= 0) {
      bidderCollection[idx].count += 1;
    } else {
      bidderCollection.push({ id: enchere.card_id, count: 1 });
    }

    await prisma.user.update({
      where: { id: enchere.seller_id },
      data: {
        currency: { increment: enchere.bid },
      },
    });

    await prisma.user.update({
      where: { id: enchere.bidder_id },
      data: {
        collection: bidderCollection,
      },
    });

    await prisma.auction.delete({ where: { id: auctionId } });

    res.status(200).json({ message: "‚úÖ Ench√®re cl√¥tur√©e avec succ√®s" });

  } catch (err) {
    console.error("‚ùå Erreur lors de la cl√¥ture :", err.message);
    res.status(401).json({ message: "Token invalide ou erreur serveur" });
  }
}

// =============================

module.exports = {
    CreateAuction,
    PlaceBid,
    GetAllEncheres,
    CloturerEnchere
};